1099. Build A Binary Search Tree (30)

时间限制
100 ms
内存限制
65536 kB
代码长度限制
16000 B
判题程序
Standard
作者
CHEN, Yue
A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
Given the structure of a binary tree and a sequence of distinct integer keys, there is only one way to fill these keys into the tree so that the resulting tree satisfies the definition of a BST. You are supposed to output the level order traversal sequence of that tree. The sample is illustrated by Figure 1 and 2.


Input Specification:

Each input file contains one test case. For each case, the first line gives a positive integer N (<=100) which is the total number of nodes in the tree. The next N lines each contains the left and the right children of a node in the format "left_index right_index", provided that the nodes are numbered from 0 to N-1, and 0 is always the root. If one child is missing, then -1 will represent the NULL child pointer. Finally N distinct integer keys are given in the last line.

Output Specification:

For each test case, print in one line the level order traversal sequence of that tree. All the numbers must be separated by a space, with no extra space at the end of the line.

Sample Input:
9
1 6
2 3
-1 -1
-1 4
5 -1
-1 -1
7 -1
-1 8
-1 -1
73 45 11 58 82 25 67 38 42
Sample Output:
58 25 82 11 38 67 45 73 42




#include<iostream> 
#include<vector>
#include<cstdio>
#include<map>
#include<cmath>
#include<climits>
#include<cstring>
#include<string>
#include<deque>
#include<algorithm>
#include<queue>
#include<stack>
using namespace std;
vector<int> vc,res;
int cnt=0;
struct Node{
	int value;
	int lchild,rchild;

};
vector<Node> node;
void build(int root){
	if(node[root].lchild==-1 &&node[root].rchild==-1){
		node[root].value=vc[cnt++];
		return ;
	}
	if(node[root].lchild !=-1)build(node[root].lchild);
	node[root].value=vc[cnt++];
	if(node[root].rchild !=-1)build(node[root].rchild);
	return ;
}
int main(){
	int n;
	cin>>n;
	node.resize(n);
	vc.resize(n);
	for(int i=0;i<n;i++){
		scanf("%d%d",&node[i].lchild,&node[i].rchild);
	} 
	for(int i=0;i<n;i++)scanf("%d",&vc[i]);
	sort(vc.begin(),vc.end());
	build(0);
	deque<int> dq;
	dq.push_back(0);
	while(!dq.empty()){
		int now=dq.front();
		dq.pop_front();
		res.push_back(node[now].value);
		if(node[now].lchild!=-1)dq.push_back(node[now].lchild);
		if(node[now].rchild!=-1)dq.push_back(node[now].rchild);
	}
	for(int i=0;i<n;i++){
		cout<<res[i];
		if(i!=n-1)cout<<" ";
	}
	return 0;
} 
