1010. Radix (25)
时间限制
400 ms
内存限制
65536 kB
代码长度限制
16000 B
判题程序
Standard
作者
CHEN, Yue
Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is "yes", if 6 is a decimal number and 110 is a binary number.

Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.

Input Specification:

Each input file contains one test case. Each case occupies a line which contains 4 positive integers:
N1 N2 tag radix
Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number "radix" is the radix of N1 if "tag" is 1, or of N2 if "tag" is 2.

Output Specification:

For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print "Impossible". If the solution is not unique, output the smallest possible radix.

Sample Input 1:
6 110 1 10
Sample Output 1:
2
Sample Input 2:
1 ab 1 2
Sample Output 2:
Impossible





#include<iostream>
#include<vector>
#include<cstdio>
#include<map>
#include<cmath>
#include<climits>
#include<cstring>
#include<string>
using namespace std;

int main(){
	string s1,s2;
	cin>>s1>>s2;
	int flag,radix;
	cin>>flag>>radix;
	if(flag==2){
		string str=s2;
		s2=s1;
		s1=str;
	}
		long long now=0;
		for(int i=0;i<s1.size();i++){
			now*=radix;
			if(isdigit(s1[i]))now+=s1[i]-'0';
			else now+=s1[i]-'a'+10;
		}
		for(int i=2;;i++){
			long long temp=0;
			bool flag=false;
			bool flag1=false;
			for(int j=0;j<s2.size();j++){
				temp*=i;
				long long temp1=0;
				if(isdigit(s2[j]))temp1=s2[j]-'0';
				else temp1=s2[j]-'a'+10;
				if(temp1>=i)break;
				else temp+=temp1;
				if(temp>now){
				flag=true;break;
				}
				if(j==s2.size()-1)flag1=true;
			}
			if(flag){
				cout<<"Impossible";return 0;
			}
			if(temp==now &&flag1){
			cout<<i;return 0;
			}
		}
	return 0;
	
} 



#include<iostream>
#include<cstring>
#include<string>

#define max 11  

char a[4][max];

long long num2Dec(char * p, long long radix)
{
	long long  i;
	long long  len = strlen(p);

	long long digit = 0;
	long long m = 1;
	long long sum = 0;
	for (i = len - 1; i >= 0; i--)
	{
		if (p[i] >= 'a'&&p[i] <= 'z')
			digit = p[i] - 'a' + 10;
		else if (p[i] >= '0'&& p[i] <= '9')
			digit = p[i] - '0';
		sum += digit*m;
		m *= radix;
	}
	return sum;
}

int findLeastRadix(char *p)
{
	long long  len = strlen(p);
	long long  low = 0;
	long long num;
	long long i;
	for (i = len - 1; i >= 0; i--)
	{
		if (p[i] >= 'a'&&p[i] <= 'z')
			num = p[i] - 'a' + 10;
		else if (p[i] >= '0'&& p[i] <= '9')
			num = p[i] - '0';
		if (num + 1>low)
			low = num + 1;
	}
	return low;

}

int compare(char* p, long long radix, long long target)
{
	long long  i;
	long long len = strlen(p);

	long long m = 1;
	long long num = 1;
	long long sum = 0;
	for (i = len - 1; i >= 0; i--)
	{
		if (p[i] >= 'a'&&p[i] <= 'z')
			num = p[i] - 'a' + 10;
		else if (p[i] >= '0'&& p[i] <= '9')
			num = p[i] - '0';
		sum += num*m;
		m *= radix;
		if (sum>target)  //avoid  overflow  
			return 1;
	}

	if (sum>target)
		return 1;
	else if (sum<target)
		return -1;
	else
		return 0;

}


long long binarySearch(char* p, long long low, long long high, long long target){

	long long mid = low;
	int tag;

	while (low <= high) {

		tag = compare(p, mid, target);

		switch (tag) {
		case -1:
			low = mid + 1;
			break;
		case 0:
			return mid;
		case 1:
			high = mid - 1;
		}

		mid = (low + high) >> 1;
	}

	return -1;
}


int main(int argc, char* argv[])
{
	int i;
	int tag;
	int base;
	long long n1;
	long long n2;
	long long low;
	long long high;
	long long radix;

	for (i = 0; i<4; i++) {
		scanf("%s", a[i]);
	}

	tag = atoi(a[2]);
	base = atoi(a[3]);

	switch (tag) {
	case 1:
		n1 = num2Dec(a[0], base);
		low = findLeastRadix(a[1]);
		high = (n1 + 1 > low + 1) ? n1 + 1 : low + 1;
		radix = binarySearch(a[1], low, high, n1);
		break;

	case 2:
		n2 = num2Dec(a[1], base);
		low = findLeastRadix(a[0]);
		high = (n2 + 1 > low + 1) ? n2 + 1 : low + 1;
		radix = binarySearch(a[0], low, high, n2);
		break;
	}

	if (-1 != radix){
		printf("%ld\n", (long)radix);
	}
	else {
		printf("Impossible");
	}

	return 0;
}
