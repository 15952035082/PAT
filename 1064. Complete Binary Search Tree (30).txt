1064. Complete Binary Search Tree (30)

时间限制
100 ms
内存限制
65536 kB
代码长度限制
16000 B
判题程序
Standard
作者
CHEN, Yue
A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
A Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.

Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.

Input Specification:

Each input file contains one test case. For each case, the first line contains a positive integer N (<=1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.

Output Specification:

For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.

Sample Input:
10
1 2 3 4 5 6 7 8 9 0
Sample Output:
6 3 8 1 5 7 9 0 2 4


#include<iostream> 
#include<vector>
#include<cstdio>
#include<map>
#include<cmath>
#include<climits>
#include<cstring>
#include<string>
#include<deque>
#include<algorithm>
#include<queue>
using namespace std;
vector<int> vc,res;
struct node{
	int value;
	node *lchild,*rchild;
	node(){
		lchild=NULL;rchild=NULL;
	}
};
node * build(int level,int left,int right){
	if(left>right)return NULL;
	int uplevel=pow(2,level-1)-1;
	int lastrow=right-left+1-uplevel;
	int lasthalfmax=pow(2,level-2);
	int k;//记录根节点左边的节点数；
	if(lastrow>lasthalfmax)k= uplevel;
	else k=uplevel/2+lastrow;
	node  *root=new node();
	root->value=vc[k+left];
	root->lchild=build(level-1,left,k-1+left);
	root->rchild=build(level-1,k+1+left,right);
	return root;	
}
void output(node * root,vector<int> &vc ){
	queue<node *> q;
	q.push(root);
	while(!q.empty()){
		node *now=q.front();
		vc.push_back(now->value);
		if(now->lchild)q.push(now->lchild);
		if(now->rchild)q.push(now->rchild);
		q.pop();
	}
}
int main(){
	int n;
	cin>>n; 
	for(int i=0;i<n;i++){
		int temp;
		cin>>temp;
		vc.push_back(temp);
	}
	sort(vc.begin(),vc.end());
	int level=log2(n)+1;
	node *root;
	root =build(level,0,n-1);
	output(root,res );
	for(int i=0;i<n;i++){
		cout<<res[i];
		if(i!=n-1)cout<<" ";
	}
	return 0;
	
} 