1107. Social Clusters (30)

时间限制
1000 ms
内存限制
65536 kB
代码长度限制
16000 B
判题程序
Standard
作者
CHEN, Yue
When register on a social network, you are always asked to specify your hobbies in order to find some potential friends with the same hobbies. A "social cluster" is a set of people who have some of their hobbies in common. You are supposed to find all the clusters.

Input Specification:

Each input file contains one test case. For each test case, the first line contains a positive integer N (<=1000), the total number of people in a social network. Hence the people are numbered from 1 to N. Then N lines follow, each gives the hobby list of a person in the format:

Ki: hi[1] hi[2] ... hi[Ki]

where Ki (>0) is the number of hobbies, and hi[j] is the index of the j-th hobby, which is an integer in [1, 1000].

Output Specification:

For each case, print in one line the total number of clusters in the network. Then in the second line, print the numbers of people in the clusters in non-increasing order. The numbers must be separated by exactly one space, and there must be no extra space at the end of the line.

Sample Input:
8
3: 2 7 10
1: 4
2: 5 3
1: 4
1: 3
1: 4
4: 6 8 1 5
1: 4
Sample Output:
3
4 3 1




#include<iostream> 
#include<vector>
#include<cstdio>
#include<map>
#include<cmath>
#include<climits>
#include<cstring>
#include<string>
#include<deque>
#include<algorithm>
#include<queue>
#include<stack>
#include<set>
using namespace std;
int father[1005];
struct Node{
	int people=0;
	bool flag;
}node[1005];

int find(int k){
	int z=k;
	while(z!=father[z])z=father[z];
	while(k!=father[k]){
		k=father[k];
		father[k]=z;
	}
	return z;
}
bool cmp(Node a,Node b){
	return a.people>b.people;
}

void Union( int a,int b){
	int fa=find(a);
	int fb=find(b);
	if(fa<fb)father[fb]=fa;
	else father[fa]=fb;
}
int main(){
	int n,m,temp1,temp2;
	cin>>n;
	int *hobby=new int[n+1];
	for(int i=0;i<1005;i++)father[i]=i;
	for(int i=1;i<=n;i++){
		scanf("%d",&m);
		getchar();
		scanf("%d",&temp1);
		hobby[i]=temp1;
		for(int j=2;j<=m;j++){
			scanf("%d",&temp2);
			Union(temp1,temp2);
		}
	} 
	for(int i=1;i<=n;i++){
		node[find(hobby[i])].people++;node[find(hobby[i])].flag=true;
	}
	int cnt=0;
	sort(node,node+1005,cmp);
	for(int i=0;i<1005;i++){
		if(node[i].flag)cnt++;
	}
	cout<<cnt<<endl;
	for(int i=0;i<cnt;i++){
		cout<<node[i].people;
		if(i!=cnt-1)cout<<" ";
	}
	return 0;
}